test
2
2
3
17
73
101
137
353
449
641
1409
69857
5882353
Filename: pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
    76                             	@profile
    77                             	def invert(a, b):
    78                             		'''Computes the inverse of a modulo b. b must be odd.
    79                             
    80     8.156 MB     0.000 MB   Returns the inverse of a (mod b).'''
    81     9.867 MB     1.711 MB   		if a == 0 or b == 0:
    82                             			return 0
    83                             
    84     9.867 MB     0.000 MB   		truth = False
    85     9.867 MB     0.000 MB   		if a < 0:
    86                             			truth = True
    87                             			a = -a
    88                             
    89     9.867 MB     0.000 MB   		b_orig = b
    90     9.867 MB     0.000 MB   		alpha = 1
    91     9.039 MB    -0.828 MB   		beta = 0
    92                             
    93     9.867 MB     0.828 MB   		while not a & 1:
    94     9.867 MB     0.000 MB   			if alpha & 1:
    95     9.867 MB     0.000 MB   				alpha += b_orig
    96     9.867 MB     0.000 MB   			alpha >>= 1
    97     9.812 MB    -0.055 MB   			a >>= 1
    98                             
    99     9.867 MB     0.055 MB   		if b > a:
   100     9.867 MB     0.000 MB   			a, b = b, a
   101     8.172 MB    -1.695 MB   			alpha, beta = beta, alpha
   102                             
   103     9.867 MB     1.695 MB   		while b != 0 and a != b:
   104     9.867 MB     0.000 MB   			a -= b
   105     8.727 MB    -1.141 MB   			alpha -= beta
   106                             
   107     9.867 MB     1.141 MB   			while not a & 1:
   108     9.867 MB     0.000 MB   				if alpha & 1:
   109     9.039 MB    -0.828 MB   					alpha += b_orig
   110     9.867 MB     0.828 MB   				alpha >>= 1
   111     9.867 MB     0.000 MB   				a >>= 1
   112                             			
   113     9.867 MB     0.000 MB   			if b > a:
   114     9.867 MB     0.000 MB   				a,b = b,a
   115     9.867 MB     0.000 MB   				alpha, beta = beta, alpha
   116                             
   117     9.867 MB     0.000 MB   		if a == b:
   118     9.867 MB     0.000 MB   			a -= b
   119     9.867 MB     0.000 MB   			alpha -= beta
   120     9.867 MB     0.000 MB   			a, b = b, a
   121     9.867 MB     0.000 MB   			alpha, beta = beta, alpha
   122                             
   123     9.867 MB     0.000 MB   		if a != 1:
   124     9.867 MB     0.000 MB   			return 0
   125     8.160 MB    -1.707 MB   
   126     9.867 MB     1.707 MB   		if truth:
   127                             			alpha = b_orig - alpha
   128                             		
   129     9.867 MB     0.000 MB   		return alpha


Filename: pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
   538                             @profile
   539                             def parallel_invert(l, n):
   540                             	'''Inverts all elements of a list modulo some number, using 3(n-1) modular multiplications and one inversion.
   541                             
   542     8.152 MB     0.000 MB   Returns the list with all elements inverted modulo 3(n-1).'''
   543     8.164 MB     0.012 MB   	l_ = l[:]
   544     9.867 MB     1.703 MB   	for i in xrange(len(l)-1):
   545     9.867 MB     0.000 MB   		l[i+1] = (l[i] * l[i+1]) % n
   546                             	
   547     9.867 MB     0.000 MB   	inv = invert(l[-1], n)
   548     9.867 MB     0.000 MB   	if inv == 0:
   549     9.867 MB     0.000 MB   		return gcd(l[-1], n)
   550     8.160 MB    -1.707 MB   
   551     9.867 MB     1.707 MB   	for i in xrange(len(l)-1, 0, -1):
   552     9.867 MB     0.000 MB   		l[i] = (inv * l[i-1]) % n
   553     9.867 MB     0.000 MB   		inv = (inv * l_[i]) % n
   554     9.867 MB     0.000 MB   	l[0] = inv
   555                             
   556     9.867 MB     0.000 MB   	return l


Filename: pyecm.py

Line #    Mem usage    Increment   Line Contents
================================================
   431                             @profile
   432                             def double(p, n):
   433                             	'''Doubles each point in the input list. Much like the add function, we take advantage of fast inversion.
   434                             
   435     8.160 MB     0.000 MB   Returns the doubled list.'''
   436     8.172 MB     0.012 MB   	inv = range(len(p))
   437                             
   438     9.812 MB     1.641 MB   	for i in xrange(len(p)):
   439     9.812 MB     0.000 MB   		inv[i] = p[i][1] << 1
   440                             
   441     9.867 MB     0.055 MB   	inv = parallel_invert(inv, n)
   442                             
   443     8.172 MB    -1.695 MB   	if not isinstance(inv, list):
   444                             		return inv
   445                             
   446     9.867 MB     1.695 MB   	for i in xrange(len(p)):
   447     9.867 MB     0.000 MB   		x = p[i][0]
   448     9.867 MB     0.000 MB   		m = (x * x) % n
   449     9.867 MB     0.000 MB   		m = ((m + m + m + p[i][2]) * inv[i]) % n
   450     9.867 MB     0.000 MB   		p[i][0] = (m * m - x - x) % n
   451     9.867 MB     0.000 MB   		p[i][1] = (m * (x - p[i][0]) - p[i][1]) % n
   452                             
   453     9.867 MB     0.000 MB   	return p


